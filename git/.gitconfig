[core]
	# Use a global .gitignore file.
	excludesfile = ~/.gitignore

	# Enable parallel I/O for operations like "git diff".
	# See http://stackoverflow.com/q/18257622/276478
	preloadindex = true

	# Use 12 characters for the abbreviated commit hash. I can currently make
	# do with 10, but this should provide a certain level of safety for the
	# near-ish future. See the interesting and well-researched article at
	# http://blog.cuviper.com/2013/11/10/how-short-can-git-abbreviate/
	abbrev = 12

[color]
	# Use colors by default when the output is a terminal that supports them.
	ui = auto

[color.grep]
	filename = bold green
	match = black yellow

[diff]
	# Use more time to create better diffs. E.g. matching opening/closing braces
	# from neighbour functions.
	algorithm = patience

	# Tells Git to detect renames. If set to "true", it will enable basic
	# rename detection. If set to "copies", it will detect copies, as well.
	renames = copies

[merge]
	tool = vimdiff

	# When merging, add a list of merged commits to the autogenerated commit
	# message.
	log = true

[push]
	# Make "git push" or "git push <remote>" only push the current branch to
	# the tracked branch (regardless of its remote name) as opposed to pushing
	# all branches with a matching name on the remote. See "An asymmetry
	# between git pull and push": http://longair.net/blog/?p=572
	default = tracking

[alias]
	# When doing "git git log" or some such, do not complain about "git" not
	# being a valid Git command. This happens when copy-pasting examples, for
	# instance.
	git = !git

	# Show a concise status of the working directory, along with the branch
	# and the number of commits behind and/or ahead.
	s = status --short --branch

	# Quickly push to the most common destination.
	pom = push origin master

	# I know "pum" could just as well stand for "PUsh" instead of "PUll", but
	# I am so used to "git pom" that "git pum" feels like a natural
	# counterpart. I always try to rebase to prevent unnecessary merge
	# commits.
	pum = pull --rebase origin master

	# Show the staged changes.
	dc = diff --cached

	# Switch branches, creating them if necessary. I want to unlearn using
	# "git checkout" for switching between branches because of the possible
	# dataloss when not paying attention. (You could see the PEBKAC, but I
	# could reply with another four letter acronym, slightly resembling TOFU.)
	#
	# Suppose I have modified a file named "password" and have two branches,
	# "password-expiry-mechanism" and "password-reset-mail". If I want to
	# switch to either branch, I would type "git checkout pass<Tab><Enter>",
	# but the autocomplete would stop at "git checkout password" because of
	# the ambiguity. Because I press <Enter> without really thinking, I have
	# now reset my "password" file. With "git go pass<Tab><Enter>", I would
	# simply have created a new branch called "password". (I would be forced
	# to use "--" to separate paths from banch names, which is a Good Thingâ„¢.)
	go = checkout -B
[user]
	email = "amlweems@gmail.com"
	name = "Anthony Weems"
	signingkey = B56CD331
