#!/bin/bash

# Settings, functions and aliases for commands
# =============================================================================

# Enable simple aliases to be sudo'ed. ("sudone"?)
# http://www.gnu.org/software/bash/manual/bashref.html#Aliases says: "If the
# last character of the alias value is a space or tab character, then the next
# command word following the alias is also checked for alias expansion."
alias sudo='sudo ';

# Paths and binaries
# -----------------------------------------------------------------------------
# List the directories we want to add to the PATH variable, if they exist.
paths_to_add=(
	# Private "bin"
	"$HOME/bin"
	# Homebrew, Rudix (and various other distributions and local installations)
	/usr/local/{,s}bin
	# MacPorts
	/opt/local/{,s}bin
	# System
	/{,s}bin
	/usr/{,s}bin
	# X binaries
	/usr/X11/bin
);

# Create an array of directories currently in the PATH variable.
oldIFS="$IFS";
IFS=:;
set -- $PATH;
IFS="$oldIFS";
unset oldIFS;
old_paths=("$@");

# Construct an array of the directories in the new PATH, preferring our paths
# to the predefined ones.
new_paths=();
for path_to_add in "${paths_to_add[@]}"; do
	[ -d "$path_to_add" ] && new_paths+=("$path_to_add");
done;
for old_path in "${old_paths[@]}"; do
	[ -d "$old_path" ] || continue;
	for new_path in "${new_paths[@]}"; do
		[ "${old_path%%/}" = "${new_path%%/}" ] && continue 2;
	done;
	new_paths+=("$old_path");
done;

# Now implode everything into the new PATH variable.
printf -v PATH "%s:" "${new_paths[@]}";
export PATH="${PATH%:}";
unset {old,new}_path{,s} path{s,}_to_add;

# OS X's file system is case-insensitive by default, so use aliases to get
# "GET"/"HEAD"/â€¦ working. (Otherwise "HEAD" would execute "/usr/bin/head".)
[[ "$OSTYPE" =~ ^darwin ]] && for method in GET HEAD POST PUT DELETE TRACE OPTIONS; do
	alias "$method"="/usr/bin/lwp-request -m $method";
done;
unset method;

# Confirm before overwriting
# -----------------------------------------------------------------------------
# I know it is bad practice to override the default commands, but this is for
# my own safety. If you really want the original "instakill" versions, you can
# use "command rm", "\rm", or "/bin/rm" inside your own commands, aliases, or
# shell functions. Note that separate scripts are not affected by the aliases
# defined here.
#alias cp='cp -i';
#alias mv='mv -i';
#alias rm='rm -i';

# Editors and pagers
# -----------------------------------------------------------------------------
export EDITOR='vim';

# Make sure "view" as-is works when stdin is not a terminal and prevent the
# normal ensuing keyboard input chaos.
function view {
	local args=("$@");
	if ! [ -t 0 ] && ! (($#)); then
		echo 'Warning: Input is not from a terminal. Forcing "view -".';
		args=('-');
	fi;
	command view "${args[@]}";
}

# Make less the default pager, and specify some useful defaults.
less_options=(
	# If the entire text fits on one screen, just show it and quit. (Be more
	# like "cat" and less like "more".)
	--quit-if-one-screen

	# Do not clear the screen first.
	--no-init

	# Like "smartcase" in Vim: ignore case unless the search pattern is mixed.
	--ignore-case

	# Do not automatically wrap long lines.
	--chop-long-lines

	# Allow ANSI colour escapes, but no other escapes.
	--RAW-CONTROL-CHARS

	# Do not ring the bell when trying to scroll past the end of the buffer.
	--quiet

	# Do not complain when we are on a dumb terminal.
	--dumb
);
export LESS="${less_options[*]}";
unset less_options;
export PAGER='less';

# Make "less" transparently unpack archives etc.
if [ -x /usr/bin/lesspipe ]; then
	eval $(/usr/bin/lesspipe);
elif command -v lesspipe.sh > /dev/null; then
	# MacPorts recommended "/opt/local/bin/lesspipe.sh", but this is more
	# portable for people that have it in another directory in their $PATH.
	eval $(lesspipe.sh);
fi;


# Colors
# -----------------------------------------------------------------------------
# Always use colour output for "ls".
if [[ "$OSTYPE" =~ ^darwin ]]; then
	alias ls='command ls -G';
else
	alias ls='command ls --color=auto';
	export LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:';
fi;

# Autocompletion
# -----------------------------------------------------------------------------
complete -d cd pushd rmdir;
complete -u finger mail;
complete -v set unset;
[ -d ~/.bash/completion ] && for file in ~/.bash/completion/*; do
	[ -f "$file" ] && source "$file";
done;
unset file;

# Brew autocompletion
[ -f /usr/local/etc/bash_completion ] && source /usr/local/etc/bash_completion;

# Utilities
# -----------------------------------------------------------------------------
# OS X has no "md5sum", so use "md5" as a fall-back.
command -v md5sum > /dev/null || alias md5sum='md5';

# Make the "sudo" prompt more useful, without requiring access to "visudo".
export SUDO_PROMPT='[sudo] password for %u on %h: ';

# Version control
# -----------------------------------------------------------------------------
# Use "colordiff" or "highlight" to colour diffs.
if command -v colordiff > /dev/null; then
	alias difflight='colordiff | less -XFIRd';
elif command -v highlight > /dev/null; then
	alias difflight='highlight --dark-red ^-.* | highlight --dark-green ^+.* | highlight --yellow ^Only.* | highlight --yellow ^Files.*differ$ | less -XFIRd';
else
	alias difflight='less -XFIRd';
fi;

# Git autocompletion.
# TODO: move this to a separate .bash/completion/git or some such.
[ -f ~/git-completion.bash ] && source ~/git-completion.bash;

# Show the current Git branch, if any.
# (This is useful in the shell prompt.)
function git-show-branch {
	branch="$(git symbolic-ref -q HEAD 2>/dev/null)";
	ret=$?;
	case $ret in
		0) echo "(${branch##*/})";;
		1) echo '(no branch)';;
		128) echo -n;;
		*) echo "[unknown git exit code: $ret]";;
	esac;
	return $ret;
}
