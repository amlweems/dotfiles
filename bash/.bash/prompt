#!/bin/bash

# Shell prompt settings
# =============================================================================

# Set the terminal's title.
function title () {
	echo -n $'\e]0;'"$@"$'\a';
}

function __prompt_kubectx () {
    ctx="$(cat ~/.kube-ctx)"
    if [ "$ctx" = "production" ]; then
        echo -ne "${FONT_BOLD}${FG_RED}";
    fi
}

# Display an error message inside the prompt when the previous command has
# failed. If it was terminated using a signal, display the signal's name. For
# example, terminating a command using Ctrl+C would display: "[ SIGINT ]".
# "Normal" error codes display the number, e.g. "[ Error 13 ]".
function __prompt_display_error () {
	local ret="$?";
	if [ "$ret" -eq 0 ]; then
		local msg="${FG_GREEN}$ret";
	else
		local msg="${FG_RED}$ret";
	fi;

	# Show the error message.
	echo -ne "${FONT_BOLD}$msg${FONT_RESET}${__prompt_color}";
	return "$ret";
}

export __prompt_color="$FG_BLUE"
export PS1="\${__prompt_color}\$(__prompt_display_error 2>/dev/null || :) \$(__prompt_kubectx)\\w\\e[m\\n\\$ ";

# Restore the original prompt for multiline commands (PS2). This overrides any
# system-wide customisations in /etc/profile, for instance.
export PS2='> ';

# Restore the original prompt for select menus. This is unset initially and
# seems to default to "#? ".
unset PS3;

# Include the current file and line number when tracing using "set -x" (PS4).
ps4_parts=(
	# Same as the default: start with a plus sign that gets repeated based on
	# the current stack depth. (Bash repeats the first character of PS4.)
	'+ '

	# Make the following extra information stand out less.
	"${FG_BLUE}${FONT_BOLD}"

	# Show the name of the current shell function, if any.
	'${FUNCNAME:-}'

	# Show the basename and line number of the source file or function, if
	# any. If there was a function name, put an "@" between the function name
	# and the file/function.
	'${BASH_SOURCE:+${FUNCNAME:+@}}'

	# Note that LINENO is reset from 1 inside a function body. Sometimes,
	# $LINENO is a negative number. I could not find any reference to this in
	# the man page, but it seems to have to happen when returning from another
	# function. Until I understand this more completely, I wrap it in
	# parentheses to clarify that it is not a regular line number.
	'${BASH_SOURCE:+${BASH_SOURCE##*/}:${LINENO/#-*/($LINENO)}}'

	# Use a tab to separate the file/function and line number from the actual
	# line of code, rather than a space, because this helps legibility. (It
	# decreases the "jaggedness" caused by differing lengthts of file names
	# and line numbers.) I prefer this to a newline because it keeps the trace
	# more compact.
	$'\t'

	# Reset the colour and style.
	"${FONT_RESET}"
);
printf -v PS4 '%s' "${ps4_parts[@]}";
export PS4;
unset ps4_parts;
